name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows
            runs-on: windows-latest
            target-os: windows
            target-arch: amd64
            rust-target: x86_64-pc-windows-msvc

          - os: windows
            runs-on: windows-11-arm
            target-os: windows
            target-arch: arm64
            rust-target: aarch64-pc-windows-msvc

          # macOS builds
          - os: macos
            runs-on: macos-13
            target-os: darwin
            target-arch: amd64
            rust-target: x86_64-apple-darwin

          - os: macos
            runs-on: macos-latest
            target-os: darwin
            target-arch: arm64
            rust-target: aarch64-apple-darwin

          # Linux builds
          - os: ubuntu
            runs-on: ubuntu-22.04
            target-os: linux
            target-arch: amd64
            rust-target: x86_64-unknown-linux-gnu

          - os: ubuntu
            runs-on: ubuntu-22.04-arm
            target-os: linux
            target-arch: arm64
            rust-target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Install cross-compilation dependencies for Linux ARM64
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.os == 'ubuntu' && matrix.target-arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      # Set up environment for cross-compilation
      - name: Set cross-compilation environment (Linux ARM64)
        if: matrix.os == 'ubuntu' && matrix.target-arch == 'arm64'
        run: |
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV

      - name: Build for ${{ matrix.target-os }}-${{ matrix.target-arch }}
        env:
          RUST_TARGET: ${{ matrix.rust-target }}
        run: make build-${{ matrix.target-os }}-${{ matrix.target-arch }}

      # Test on native architecture only
      - name: Test ${{ matrix.target-os }}-${{ matrix.target-arch }}
        # if: |
        #   (matrix.os == 'windows' && matrix.target-arch == 'amd64') ||
        #   (matrix.os == 'ubuntu' && matrix.target-arch == 'amd64') ||
        #   (matrix.os == 'macos' && matrix.target-arch == 'arm64' && runner.arch == 'ARM64') ||
        #   (matrix.os == 'macos' && matrix.target-arch == 'amd64' && runner.arch == 'X64')
        run: make test-${{ matrix.target-os }}-${{ matrix.target-arch }}

      # For cross-compiled binaries, just verify they were built
      - name: Verify build artifacts
        shell: bash
        run: |
          echo "Checking build artifacts in dist/${{ matrix.target-os }}-${{ matrix.target-arch }}/"
          ls -la dist/${{ matrix.target-os }}-${{ matrix.target-arch }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target-os }}-${{ matrix.target-arch }}
          path: dist/${{ matrix.target-os }}-${{ matrix.target-arch }}/
          retention-days: 7

  # Create a release when pushing tags
  release:
    needs: build
    runs-on: ubuntu
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create tarballs
        run: |
          cd artifacts
          for dir in */; do
            tar czf "../${dir%/}.tar.gz" "$dir"
          done
          cd ..
          ls -la *.tar.gz

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: '*.tar.gz'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
